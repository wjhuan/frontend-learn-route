(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{695:function(t,s,a){t.exports=a.p+"assets/img/v2-472279bc659c18eebbaf5f966042abbf_1440w.5b272415.png"},696:function(t,s,a){t.exports=a.p+"assets/img/v2-1ad91365365ded2771a2aa7bf0970584_1440w.507b562e.png"},697:function(t,s,a){t.exports=a.p+"assets/img/v2-2b2b9a847c6094943d499b28ebfd0579_1440w.2b2b9a84.png"},698:function(t,s,a){t.exports=a.p+"assets/img/v2-1e8f87335e015e84c8aa2f3fd83d9c12_1440w.1e8f8733.png"},699:function(t,s,a){t.exports=a.p+"assets/img/TCP.572872b8.png"},700:function(t,s,a){t.exports=a.p+"assets/img/net.7ce66d7c.png"},701:function(t,s,a){t.exports=a.p+"assets/img/https.a54fd2d8.png"},702:function(t,s,a){t.exports=a.p+"assets/img/middle.716336e0.jpeg"},703:function(t,s,a){t.exports=a.p+"assets/img/https-error.76783f0e.png"},704:function(t,s,a){t.exports=a.p+"assets/img/ws.331a5dfa.png"},705:function(t,s,a){t.exports=a.p+"assets/img/loop.69486292.png"},821:function(t,s,a){"use strict";a.r(s);var e=a(74),v=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"网络面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络面试题"}},[t._v("#")]),t._v(" 网络面试题")]),t._v(" "),s("h2",{attrs:{id:"tcp-三次握手和四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手和四次挥手"}},[t._v("#")]),t._v(" TCP 三次握手和四次挥手")]),t._v(" "),s("p",[t._v("TCP 的总结如下：")]),t._v(" "),s("p",[t._v("① 数据分片：在发送端对用户数据进行分片，在接收端进行重组，由 TCP 确定分片的大小并控制分片和重组；")]),t._v(" "),s("p",[t._v("② 到达确认：接收端接收到分片数据时，根据分片数据序号向发送端发送一个确认；")]),t._v(" "),s("p",[t._v("③ 超时重发：发送方在发送分片时启动超时定时器，如果在定时器超时之后没有收到相应的确认，重发分片；")]),t._v(" "),s("p",[t._v("④ 滑动窗口：TCP 连接每一方的接收缓冲空间大小都固定，接收端只允许另一端发送接收端缓冲区所能接纳的数据，TCP 在滑动窗口的基础上提供流量控制，防止较快主机致使较慢主机的缓冲区溢出；")]),t._v(" "),s("p",[t._v("⑤ 失序处理：作为 IP 数据报来传输的 TCP 分片到达时可能会失序，TCP 将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层；")]),t._v(" "),s("p",[t._v("⑥ 重复处理：作为 IP 数据报来传输的 TCP 分片会发生重复，TCP 的接收端必须丢弃重复的数据；")]),t._v(" "),s("p",[t._v("⑦ 数据校验：TCP 将保持它首部和数据的检验和，这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到分片的检验和有差错，TCP 将丢弃这个分片，并不确认收到此报文段导致对端超时并重发。")]),t._v(" "),s("h3",{attrs:{id:"滑动窗口的引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口的引入"}},[t._v("#")]),t._v(" 滑动窗口的引入")]),t._v(" "),s("p",[t._v("IP 层协议属于不可靠的协议，IP 层并不关系数据是否发送到了对端，在复杂的网络中，由于各种各样的原因，接收到数据包的顺序不一定和发送的顺序相同，这就是乱序问题。这种情况下，有必要为每个包定义一个序号 seq，每个包用一个校验和确保数据完整性。")]),t._v(" "),s("p",[t._v("然后发送方不能不管接收方的承受能力，只顾着发。举个栗子，一个高速公路如果没有收费站，那么车辆就会一拥而入，此时不凑巧，发生了追尾事故，导致公路拥塞，如果不控制公路的进入车辆，那么整个高速公路都会变成“露天停车场”。说到这里你可能就明白了，TCP 需要这样的“收费站”，而这个收费站就是“滑动窗口”。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(695),alt:""}})]),t._v(" "),s("p",[t._v("然后，平时在高速上的时候，细心的你注意到了：除了入口有个收费站，出口也有个收费站。TCP 也是一样的，除了入口有发送方滑动窗口，出口处也设立有接收方滑动窗口。")]),t._v(" "),s("p",[t._v("收费站除了限制流速以外还有什么作用鸭？是不是要收费呢，毕竟这是国家修的路，不能白走是吧。")]),t._v(" "),s("p",[t._v("对于发送方滑动窗口（入口收费站），我们把数据包看成车辆，枚举它们的状态：")]),t._v(" "),s("ol",[s("li",[t._v("还未进入入口收费站车辆。对应的是下图 Not Sent，Recipient Not Ready to Receive。这些数据属于发送端未发送，同时接收端也未准备接收的。")]),t._v(" "),s("li",[t._v("进入收费站，但未进入高速路。对应的是图中的 Not Sent，Recipient Ready to Receive。这部分数据是发送端未发送，但已经告知接收方的，这部分其实已经在窗口中（发送端缓存）了，等待发送。")]),t._v(" "),s("li",[t._v("在高速公路上行驶的车辆。对应的是 Send But Not Yet Acknowledged。这部分数据称为发送但没有被确认，数据被发送出去，没有收到接收端的 ACK，认为并没有完成发送，这个属于窗口内的数据。")]),t._v(" "),s("li",[t._v("到达出口收费站的车辆。对应的是 Sent and Acknowledged。这些数据表示已经发送成功并已经被确认的数据，这些数据已经离开窗口了。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(696),alt:""}})]),t._v(" "),s("p",[t._v("对于接收方滑动窗口（出口收费站），类似发送端，接收端的数据有 4 个分类，因为接收端并不需要等待 ACK 所以它没有类似的接收并确认了的分类，情况如下")]),t._v(" "),s("ol",[s("li",[t._v("车辆还未到达出口收费站。对应 Not Received：有空位，还没有被接收的数据")]),t._v(" "),s("li",[t._v("车辆到达出口收费站，但未完成缴费。对应 Received Not ACK: 已经接收并，但是还没有回复 ACK，这些包可能输属于 Delay ACK 的范畴了。")]),t._v(" "),s("li",[t._v("车辆完成缴费，但不知道走哪条路。对应 Received and ACK Not Send to Process：这部分数据属于接收了数据但是还没有被上层的应用程序接收，也是被缓存在窗口内。")]),t._v(" "),s("li",[t._v("车辆离开出口收费站。对应 Received and ACK Send to Process。离开了窗口缓存。")])]),t._v(" "),s("p",[t._v("这样讲是不是就很明白了，下面给出滑动窗口的正式定义。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(697),alt:""}})]),t._v(" "),s("ol",[s("li",[t._v("Left edge 和 Right edge 分别表示滑动窗口的左边界和右边界。")]),t._v(" "),s("li",[t._v("Usable Window：表示窗口的缓冲区。")]),t._v(" "),s("li",[t._v("Send Window ：发送窗口， 这部分值是有接收方在三次握手的时候进行设置的，同时在接收过程中也不断的通告可以发送的窗口大小，来进行适应。")]),t._v(" "),s("li",[t._v("Window Already Sent: 已经发送的数据，但是并没有收到 ACK。")])]),t._v(" "),s("p",[t._v("滑动窗口所谓的“滑动”，并不是说窗口在动，而是因为数据在不断进入和离开窗口，也就是说真正“动”的是数据，下面一幅图就表示了这点：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(698),alt:""}})]),t._v(" "),s("h3",{attrs:{id:"滑动窗口的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口的工作原理"}},[t._v("#")]),t._v(" 滑动窗口的工作原理")]),t._v(" "),s("p",[t._v("首先，TCP 不是每个报文段都会返回 TCP 的，可能对多个报文返回一个 ACK。")]),t._v(" "),s("ol",[s("li",[t._v("有一组数据通过 TCP 传输，TCP 先 将其分成若干段，假设有四个段 seg1,seg2,seg3,seg4，依次发送出去，此时假设接收端接收到了 seg1 seg2 seg4；")]),t._v(" "),s("li",[t._v("此时接收端的行为是回复一个 ACK 包说明已经接收到，并将 seg4 进行缓存（保证顺序，产生一个保存 seg3 的 hole）；")]),t._v(" "),s("li",[t._v("发送端收到 ACK 之后，就会将对应的数据包变为已确认状态，这个时候窗口向右移动；")]),t._v(" "),s("li",[t._v("假设接收端通告的 Window Size 仍然不变，此时窗口右移，产生一些新的空位，这些是接收端允许发送的范畴；")]),t._v(" "),s("li",[t._v("对于丢失的 seg3，如果超过一定时间，TCP 就会重新传送（重传机制），重传成功会 seg3 seg4 一块被确认，不成功，seg4 也将被丢弃。")])]),t._v(" "),s("h3",{attrs:{id:"三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),s("p",[t._v("三次握手，即建立一次 TCP 连接时，客户端和服务端总共需要发送 3 个包。")]),t._v(" "),s("p",[t._v("先举一个例子。还是你要派人去张三家取一个东西，现在你要发短信（不是打电话）“建立连接”，至少需要 3 个步骤，缺一不可。")]),t._v(" "),s("ul",[s("li",[t._v("你：在家吗？")]),t._v(" "),s("li",[t._v("张三：在家")]),t._v(" "),s("li",[t._v("你：好，这就过去（然后你指派人上门，张三准备迎接）")])]),t._v(" "),s("p",[t._v("过程")]),t._v(" "),s("ul",[s("li",[t._v("客户端发包，服务端收到。服务端确认：客户端的发送能力是正常的。")]),t._v(" "),s("li",[t._v("服务端发包，客户端收到。客户端确认：服务端的接收能力是正常的。")]),t._v(" "),s("li",[t._v("客户端发包，服务端收到。服务端确认：客户端即将给我发送数据，我要准备接收。")])]),t._v(" "),s("p",[t._v("建立连接完成，然后就开始发送数据，通讯。")]),t._v(" "),s("h3",{attrs:{id:"四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),s("p",[t._v("握手，是建立连接。挥手，就是告别，就是关闭连接。")]),t._v(" "),s("p",[t._v("还是之前的例子。取东西，不一定一次就取完，可能要来回很多次。而且，也不一定全部由你主动发起，过程中张三也可能会主动派人给你发送。"),s("br"),t._v("\n即，你在 chrome 中看到的是一次 http 请求，其实背后可能需要好几次网络传输，只不过浏览器给合并起来了。")]),t._v(" "),s("p",[t._v("好了，取东西完毕了，你要发短信“关闭连接”，告诉张三可以关门了，需要 4 个步骤。"),s("br"),t._v("\n【注意】这里你需要等着确认张三关门，才算是完全关闭连接，不能你说一声就不管了。跟日常生活不一样。")]),t._v(" "),s("ul",[s("li",[t._v("你：完事儿了")]),t._v(" "),s("li",[t._v("张三：好的 （此时可能还要继续给你发送，你也得继续接收。直到张三发送完）")]),t._v(" "),s("li",[t._v("张三：我发送完毕，准备关门了")]),t._v(" "),s("li",[t._v("你：好，关门吧 （然后你可以走了，张三可以关门了，连接结束）")])]),t._v(" "),s("p",[t._v("过程")]),t._v(" "),s("ul",[s("li",[t._v("客户端发包，服务端接收。服务端确认：客户端已经请求结束")]),t._v(" "),s("li",[t._v("服务端发包，客户端接收。客户端确认：服务端已经收到，我等待它关闭")]),t._v(" "),s("li",[t._v("服务端发包：客户端接受。客户端确认：服务端已经发送完成，可以关闭")]),t._v(" "),s("li",[t._v("客户端发包，服务端接收。服务端确认：可以关闭了")])]),t._v(" "),s("h3",{attrs:{id:"图示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图示"}},[t._v("#")]),t._v(" 图示")]),t._v(" "),s("p",[s("img",{attrs:{src:a(699),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"http-和-udp-有何区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-和-udp-有何区别"}},[t._v("#")]),t._v(" HTTP 和 UDP 有何区别")]),t._v(" "),s("h3",{attrs:{id:"网络协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络协议"}},[t._v("#")]),t._v(" 网络协议")]),t._v(" "),s("p",[s("img",{attrs:{src:a(700),alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("HTTP 在应用层，直接被程序使用")]),t._v(" "),s("li",[t._v("TCP 和 UDP 在传输层，底层")])]),t._v(" "),s("h3",{attrs:{id:"udp-的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp-的特点"}},[t._v("#")]),t._v(" UDP 的特点")]),t._v(" "),s("p",[t._v("UDP 是一种无连接的、不可靠的传输层协议。而 TCP 需要连接、断开连接，参考“三次握手、四次挥手”。")]),t._v(" "),s("p",[t._v("不需要连接，所以 UDP 的效率比 TCP 高。")]),t._v(" "),s("p",[t._v("虽然 UDP 从协议层是不稳定的，但随着现代网络硬件环境的提升，也能保证绝大部分情况下的稳定性。所以，UDP 一直处于被发展的趋势。")]),t._v(" "),s("p",[t._v("例如视频会议、语音通话这些允许中段、不完全保证持续连接的场景，又需要较高的传输效率，就很适合 UDP 协议。")]),t._v(" "),s("h3",{attrs:{id:"答案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),s("ul",[s("li",[t._v("HTTP 在应用层，而 UDP 和 TCP 在传输层")]),t._v(" "),s("li",[t._v("HTTP 是有连接的、可靠的，UDP 是无连接的、不可靠的")])]),t._v(" "),s("h2",{attrs:{id:"连环问-http-1-0-1-1-2-0-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连环问-http-1-0-1-1-2-0-区别"}},[t._v("#")]),t._v(" 连环问：http 1.0 1.1 2.0 区别")]),t._v(" "),s("p",[t._v("http 1.0 最基础的 http 协议")]),t._v(" "),s("p",[t._v("http 1.1")]),t._v(" "),s("ul",[s("li",[t._v("引入更多的缓存策略，如 "),s("code",[t._v("cache-control")]),t._v(" "),s("code",[t._v("E-tag")])]),t._v(" "),s("li",[t._v("长链接，默认开启 "),s("code",[t._v("Connection: keep-alive")]),t._v(" ，多次 http 请求减少了 TCP 连接次数")]),t._v(" "),s("li",[t._v("断点续传，状态吗 "),s("code",[t._v("206")])]),t._v(" "),s("li",[t._v("增加新的 method "),s("code",[t._v("PUT")]),t._v(" "),s("code",[t._v("DELETE")]),t._v(" 等，可以设计 Restful API")])]),t._v(" "),s("p",[t._v("http2.0")]),t._v(" "),s("ul",[s("li",[t._v("header 压缩，以减少体积")]),t._v(" "),s("li",[t._v("多路复用，一个 TCP 连接中可以多个 http 并行请求。拼接资源（如雪碧图、多 js 拼接一个）将变的多余")]),t._v(" "),s("li",[t._v("服务器端推送")])]),t._v(" "),s("h2",{attrs:{id:"什么是-https-中间人攻击-如何预防"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-https-中间人攻击-如何预防"}},[t._v("#")]),t._v(" 什么是 https 中间人攻击，如何预防？")]),t._v(" "),s("h3",{attrs:{id:"https-加密原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-加密原理"}},[t._v("#")]),t._v(" https 加密原理")]),t._v(" "),s("p",[t._v("http 是明文传输，传输的所有内容（如登录的用户名和密码），都会被中间的代理商（无论合法还是非法）获取到。")]),t._v(" "),s("p",[t._v("http + TLS/SSL = https ，即加密传输信息。只有客户端和服务端可以解密为明文，中间的过程无法解密。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(701),alt:""}})]),t._v(" "),s("h3",{attrs:{id:"中间人攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[t._v("#")]),t._v(" 中间人攻击")]),t._v(" "),s("p",[t._v("中间人攻击，就是黑客劫持网络请求，伪造 CA 证书。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(702),alt:""}})]),t._v(" "),s("p",[t._v("解决方案：使用浏览器可识别的，正规厂商的证书（如阿里云），慎用免费证书。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(703),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"websocket-和-http-协议有何区别-有和应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-和-http-协议有何区别-有和应用场景"}},[t._v("#")]),t._v(" webSocket 和 http 协议有何区别？有和应用场景？")]),t._v(" "),s("h3",{attrs:{id:"websocket-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-简介"}},[t._v("#")]),t._v(" webSocket 简介")]),t._v(" "),s("p",[t._v("webSocket 和 http 都是应用层，支持端对端的通讯。可以由服务端发起，也可以由客户端发起。"),s("br")]),t._v(" "),s("p",[t._v("场景：消息通知，直播讨论区，聊天室，协同编辑")]),t._v(" "),s("h3",{attrs:{id:"websocket-建立连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-建立连接"}},[t._v("#")]),t._v(" webSocket 建立连接")]),t._v(" "),s("p",[t._v("会先发起一个 http 请求，根服务端建立连接。连接成功之后再升级为 webSocket 协议，然后再通讯。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(704),alt:""}})]),t._v(" "),s("h3",{attrs:{id:"websocket-和-http-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-和-http-区别"}},[t._v("#")]),t._v(" webSocket 和 http 区别")]),t._v(" "),s("ul",[s("li",[t._v("协议名称不同 "),s("code",[t._v("ws")]),t._v(" 和 "),s("code",[t._v("http")])]),t._v(" "),s("li",[t._v("http 一般只能浏览器发起请求，webSocket 可以双端发起请求")]),t._v(" "),s("li",[t._v("webSocket 无跨域限制")]),t._v(" "),s("li",[t._v("webSocket 通过 "),s("code",[t._v("send")]),t._v(" 和 "),s("code",[t._v("onmessage")]),t._v(" 进行通讯，http 通过 "),s("code",[t._v("req")]),t._v(" 和 "),s("code",[t._v("res")]),t._v(" 通讯")])]),t._v(" "),s("p",[t._v("PS："),s("code",[t._v("ws")]),t._v(" 可以升级为 "),s("code",[t._v("wss")]),t._v(" 协议，像 "),s("code",[t._v("http")]),t._v(" 升级到 "),s("code",[t._v("https")]),t._v(" 一样，增加 "),s("code",[t._v("SSL")]),t._v(" 安全协议。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createServer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" readFileSync "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" WebSocketServer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("cert")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/cert.pem'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/key.pem'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wss "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocketServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),s("p",[t._v("PS：如果做项目开发，推荐使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/socket.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("socket.io"),s("OutboundLink")],1),t._v("，API 更方便。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emit an event to the socket")]),t._v("\n  socket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'request'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* … */")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emit an event to all connected sockets")]),t._v("\n  io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'broadcast'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* … */")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// listen to the event")]),t._v("\n  socket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reply'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* … */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"连环问-websocket-和长轮询-长连接-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连环问-websocket-和长轮询-长连接-的区别"}},[t._v("#")]),t._v(" 连环问：webSocket 和长轮询（长连接）的区别")]),t._v(" "),s("ul",[s("li",[t._v("http 长轮询 - 客户端发起 http 请求，server 不立即返回，等待有结果再返回。这期间 TCP 连接不会关闭，阻塞式。（需要处理 timeout 的情况）")]),t._v(" "),s("li",[t._v("webSocket - 客户端发起请求，服务端接收，连接关闭。服务端发起请求，客户端接收，连接关闭。非阻塞。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(705),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"get-和-post-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" get 和 post 的区别")]),t._v(" "),s("ul",[s("li",[t._v("GET 在浏览器回退时是无害的，而 POST 会再次提交请求。")]),t._v(" "),s("li",[t._v("GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。")]),t._v(" "),s("li",[t._v("GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。")]),t._v(" "),s("li",[t._v("GET 请求只能进行 url 编码，而 POST 支持多种编码方式。")]),t._v(" "),s("li",[t._v("GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。")]),t._v(" "),s("li",[t._v("GET 请求在 URL 中传送的参数是有长度限制的，而 POST 么有。")]),t._v(" "),s("li",[t._v("对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。")]),t._v(" "),s("li",[t._v("GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。")]),t._v(" "),s("li",[t._v("GET 参数通过 URL 传递，POST 放在 Request body 中。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);