(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{823:function(s,e,_){"use strict";_.r(e);var r=_(74),v=Object(r.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"nodejs-面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-面试题"}},[s._v("#")]),s._v(" nodejs 面试题")]),s._v(" "),e("h2",{attrs:{id:"nodejs-如何开启一个进程-进程之间如何通讯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-如何开启一个进程-进程之间如何通讯"}},[s._v("#")]),s._v(" nodejs 如何开启一个进程，进程之间如何通讯")]),s._v(" "),e("h3",{attrs:{id:"进程-process-和线程-thread"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进程-process-和线程-thread"}},[s._v("#")]),s._v(" 进程 process 和线程 thread")]),s._v(" "),e("p",[s._v("进程，是操作系统进行资源调度和分配的基本单位，每个进程都拥有自己独立的内存区域（参考“堆栈模型”）。\n一个进程无法直接访问另一个进程的内存数据，除非通过合法的进程通讯。")]),s._v(" "),e("p",[s._v("执行一个 nodejs 文件，即开启了一个进程，可以通过 "),e("code",[s._v("process.pid")]),s._v(" 查看进程 id 。")]),s._v(" "),e("p",[s._v("线程，是操作系统进行运算调度的最小单位，线程是附属于进程的。一个进程可以包含多个线程（至少一个），多线程之间可共用进程的内存数据。"),e("br"),s._v("\n如操作系统是一个工厂，进程就是一个车间，线程就是一个一个的工人。")]),s._v(" "),e("p",[s._v("JS 是单线程的，即执行 JS 时启动一个进程（如 JS 引擎，nodejs 等），然后其中再开启一个线程来执行。"),e("br"),s._v("\n虽然单线程，JS 是基于事件驱动的，它不会阻塞执行，适合高并发的场景。")]),s._v(" "),e("h3",{attrs:{id:"为何需要多进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为何需要多进程"}},[s._v("#")]),s._v(" 为何需要多进程")]),s._v(" "),e("p",[s._v("现代服务器都是多核 CPU ，适合同时处理多进程。即，一个进程无法充分利用 CPU 性能，进程数要等于 CPU 核数。")]),s._v(" "),e("p",[s._v("服务器一般内存比较大，但操作系统对于一个进程的内存分配是有上限的（2G），所以多进程才能充分利用服务器内存。")]),s._v(" "),e("h3",{attrs:{id:"nodejs-开启多进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-开启多进程"}},[s._v("#")]),s._v(" nodejs 开启多进程")]),s._v(" "),e("p",[e("code",[s._v("child_process.fork")]),s._v(" 可开启子进程执行单独的计算（源码参考 process-fork.js）")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("fork('xxx.js')")]),s._v(" 开启一个子进程")]),s._v(" "),e("li",[s._v("使用 "),e("code",[s._v("send")]),s._v(" 发送信息，使用 "),e("code",[s._v("on")]),s._v(" 接收信息")])]),s._v(" "),e("p",[e("code",[s._v("cluster.fork")]),s._v(" 可针对当前代码，开启多个进程来执行（源码参考 cluster.js）")]),s._v(" "),e("h3",{attrs:{id:"答案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[s._v("#")]),s._v(" 答案")]),s._v(" "),e("ul",[e("li",[s._v("可使用 "),e("code",[s._v("child_process.fork")]),s._v(" 和 "),e("code",[s._v("cluster.fork")]),s._v(" 开启子进程")]),s._v(" "),e("li",[s._v("使用 "),e("code",[s._v("send")]),s._v(" "),e("code",[s._v("on")]),s._v(" 传递消息")])]),s._v(" "),e("h3",{attrs:{id:"扩展-使用-pm2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展-使用-pm2"}},[s._v("#")]),s._v(" 扩展：使用 PM2")]),s._v(" "),e("p",[s._v("nodejs 服务开启多进程、进程守护，可使用 "),e("a",{attrs:{href:"https://www.npmjs.com/package/pm2",target:"_blank",rel:"noopener noreferrer"}},[s._v("pm2"),e("OutboundLink")],1),s._v(" ，不需要自己写。代码参考 koa2-code")]),s._v(" "),e("ul",[e("li",[s._v("全局安装 pm2 "),e("code",[s._v("yarn global add pm2")])]),s._v(" "),e("li",[s._v("增加 pm2 配置文件")]),s._v(" "),e("li",[s._v("修改 package.json scripts")])])])}),[],!1,null,null,null);e.default=v.exports}}]);