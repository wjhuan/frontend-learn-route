(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{829:function(t,a,e){"use strict";e.r(a);var r=e(113),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),e("p",[t._v("对于传统的 "),e("code",[t._v("JavaScript")]),t._v(" 程序我们会使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员使用这些语法就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从 "),e("code",[t._v("ECMAScript 2015")]),t._v("，也就是 "),e("code",[t._v("ES6")]),t._v(" 开始， "),e("code",[t._v("JavaScript")]),t._v(" 程序员将能够使用基于类的面向对象的方式。 使用 TypeScript，我们允许开发者现在就使用这些特性，并且编译后的 "),e("code",[t._v("JavaScript")]),t._v(" 可以在所有主流浏览器和平台上运行，而不需要等到下个 "),e("code",[t._v("JavaScript")]),t._v(" 版本。")]),t._v(" "),e("h2",{attrs:{id:"类的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类的定义"}},[t._v("#")]),t._v(" 类的定义")])])}),[],!1,null,null,null);a.default=v.exports}}]);