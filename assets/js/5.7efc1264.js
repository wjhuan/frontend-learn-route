(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{809:function(v,_,t){v.exports=t.p+"assets/img/8.c1656bf5.png"},810:function(v,_,t){v.exports=t.p+"assets/img/9.671bf418.png"},811:function(v,_,t){v.exports=t.p+"assets/img/10.e9ca0908.png"},812:function(v,_,t){v.exports=t.p+"assets/img/11.2f675b30.png"},813:function(v,_,t){v.exports=t.p+"assets/img/12.969bb8e6.png"},814:function(v,_,t){v.exports=t.p+"assets/img/13.c9857a43.png"},815:function(v,_,t){v.exports=t.p+"assets/img/14.46f8890c.png"},816:function(v,_,t){v.exports=t.p+"assets/img/15.eafda015.png"},817:function(v,_,t){v.exports=t.p+"assets/img/16.54413117.png"},818:function(v,_,t){v.exports=t.p+"assets/img/17.23939f53.png"},819:function(v,_,t){v.exports=t.p+"assets/img/18.80e962e5.png"},820:function(v,_,t){v.exports=t.p+"assets/img/19.f6d7370e.png"},821:function(v,_,t){v.exports=t.p+"assets/img/20.3eee05bf.png"},822:function(v,_,t){v.exports=t.p+"assets/img/35.6d461cd4.png"},823:function(v,_,t){v.exports=t.p+"assets/img/36.f2509335.png"},824:function(v,_,t){v.exports=t.p+"assets/img/37.e8252216.png"},825:function(v,_,t){v.exports=t.p+"assets/img/38.55dd84ff.png"},826:function(v,_,t){v.exports=t.p+"assets/img/39.f56ec311.png"},827:function(v,_,t){v.exports=t.p+"assets/img/40.ff7b58d1.png"},828:function(v,_,t){v.exports=t.p+"assets/img/43.7fddc7bb.png"},829:function(v,_,t){v.exports=t.p+"assets/img/44.394d0915.png"},830:function(v,_,t){v.exports=t.p+"assets/img/41.c534a73f.png"},831:function(v,_,t){v.exports=t.p+"assets/img/45.c2afca64.png"},832:function(v,_,t){v.exports=t.p+"assets/img/46.96a5c579.png"},833:function(v,_,t){v.exports=t.p+"assets/img/47.2e5940b0.png"},910:function(v,_,t){"use strict";t.r(_);var a=t(74),s=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"lerna"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#lerna"}},[v._v("#")]),v._v(" lerna")]),v._v(" "),_("h2",{attrs:{id:"lerna-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#lerna-介绍"}},[v._v("#")]),v._v(" lerna 介绍")]),v._v(" "),_("blockquote",[_("p",[v._v("Lerna 是一个优化基于 git+npm 的多 package 项目的管理工具\nLerna 是架构优化的产物，它揭示了一个架构真理: 项目复杂度提升后，就需要对项目进行架构优化。架构优化的主要目标往往都是以效能为核心。")])]),v._v(" "),_("ol",[_("li",[v._v("大幅减少重复操作")]),v._v(" "),_("li",[v._v("提升操作的标准化")])]),v._v(" "),_("p",[_("img",{attrs:{src:t(809),alt:""}}),v._v(" "),_("img",{attrs:{src:t(810),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"简历编写"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简历编写"}},[v._v("#")]),v._v(" 简历编写")]),v._v(" "),_("ul",[_("li",[v._v("熟悉 Yargs 脚手架开发框架")]),v._v(" "),_("li",[v._v("熟悉多 Package 管理工具 Lerna 的使用方法和实现原理")]),v._v(" "),_("li",[v._v("深入了解 Node.is 模块路径解析流程")])]),v._v(" "),_("h3",{attrs:{id:"面试官问起细节后如何回答"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试官问起细节后如何回答"}},[v._v("#")]),v._v(" 面试官问起细节后如何回答?")]),v._v(" "),_("p",[v._v("yargs 相关问题")]),v._v(" "),_("ol",[_("li",[v._v("脚手架构成")])]),v._v(" "),_("ul",[_("li",[v._v("bin: package.json 中配置 bin 属性，npm link 本地安装")]),v._v(" "),_("li",[v._v("command: 命令")]),v._v(" "),_("li",[v._v("options: 参数(boolean/string/number)")]),v._v(" "),_("li",[v._v("文件顶部增加 #!/usr/bin/env node")])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("脚手架初始化流程")])]),v._v(" "),_("ul",[_("li",[v._v("构造函数 Yargs()")]),v._v(" "),_("li",[v._v("常用方法\n"),_("ul",[_("li",[v._v("Yargs.options")]),v._v(" "),_("li",[v._v("Yargs.option")]),v._v(" "),_("li",[v._v("Yargs.group")]),v._v(" "),_("li",[v._v("Yargs.demandCommand")]),v._v(" "),_("li",[v._v("Yargs.recommendCommands")]),v._v(" "),_("li",[v._v("Yargs.strict")]),v._v(" "),_("li",[v._v("Yargs.fail")]),v._v(" "),_("li",[v._v("Yargs.alias")]),v._v(" "),_("li",[v._v("Yargs.wrap")]),v._v(" "),_("li",[v._v("Yargs.epilogue")])])])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("脚手架参数解析方法")])]),v._v(" "),_("ul",[_("li",[v._v("hideBin(process.argv)")]),v._v(" "),_("li",[v._v("Yargs.parse(argv, options)")])]),v._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[v._v("命令注册方法")])]),v._v(" "),_("ul",[_("li",[v._v("Yargs.command(command, describe, builder, handler)")]),v._v(" "),_("li",[v._v("Yargs.command({ command, describe, builder, handler })")])]),v._v(" "),_("p",[v._v("lerna 相关问题")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("Lerna")]),v._v(" 是基于 "),_("code",[v._v("git+npm")]),v._v(" 的多"),_("code",[v._v("package")]),v._v("项目管理工具")]),v._v(" "),_("li",[v._v("实现原理")])]),v._v(" "),_("ul",[_("li",[v._v("通过 "),_("code",[v._v("import-local")]),v._v(" 优先调用本地 "),_("code",[v._v("lerna")]),v._v(" 命令")]),v._v(" "),_("li",[v._v("通过 "),_("code",[v._v("Yargs")]),v._v(" 生成脚手架，先注册全局属性，再注册命令，最后通过 "),_("code",[v._v("parse")]),v._v(" 方法解析参数")]),v._v(" "),_("li",[_("code",[v._v("lerna")]),v._v(" 命令注册时需要传入 "),_("code",[v._v("builder")]),v._v(" 和 "),_("code",[v._v("handler")]),v._v(" 两个方法，"),_("code",[v._v("builder")]),v._v(" 方法用于注册命令专属的 "),_("code",[v._v("options")]),v._v("，"),_("code",[v._v("handler")]),v._v(" 用来处理命令的业务逻辑")]),v._v(" "),_("li",[_("code",[v._v("lerna")]),v._v(" 通过配置 "),_("code",[v._v("npm")]),v._v("本地依赖的方式来进行本地开发，具体写法是在 "),_("code",[v._v("package,json")]),v._v(" 的依赖中写入: "),_("code",[v._v("file:your-local-module-path")]),v._v(" ，在"),_("code",[v._v("lerna publish")]),v._v(" 时会自动将该路径替换")])]),v._v(" "),_("p",[v._v("Node.js 模块路径解析流程")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("Node.is")]),v._v(" 项目模块路径解析是通过 "),_("code",[v._v("require.resolve")]),v._v("方法来实现的")]),v._v(" "),_("li",[_("code",[v._v("require.resolve")]),v._v(" 就是通过 "),_("code",[v._v("Module.resolveFileName")]),v._v(" 方法实现的")]),v._v(" "),_("li",[_("code",[v._v("require.resolve")]),v._v("实现原理")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("Module.resolveFileName")]),v._v("方法核心流程有 3 点")]),v._v(" "),_("ul",[_("li",[v._v("判断是否为内置模块")]),v._v(" "),_("li",[v._v("通过 "),_("code",[v._v("Module.resolveLookupPaths")]),v._v(" 方法生成 "),_("code",[v._v("node modules")]),v._v(" 可能存在的路径")]),v._v(" "),_("li",[v._v("通过 "),_("code",[v._v("Module.findPath")]),v._v(" 查询模块的真实路径")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Module.findPath")]),v._v("核心流程有 4 点")]),v._v(" "),_("ul",[_("li",[v._v("查询缓存 (将 "),_("code",[v._v("request")]),v._v(" 和 "),_("code",[v._v("paths")]),v._v(" 通过 "),_("code",[v._v("\\x00")]),v._v(" 合并成 "),_("code",[v._v("cacheKey")]),v._v(")")]),v._v(" "),_("li",[v._v("遍历 "),_("code",[v._v("paths")]),v._v("，将 "),_("code",[v._v("path")]),v._v(" 与 "),_("code",[v._v("request")]),v._v(" 组成文件路径 "),_("code",[v._v("basePath")])]),v._v(" "),_("li",[v._v("如果 "),_("code",[v._v("basePath")]),v._v(" 存在则调用 "),_("code",[v._v("fs.realPathSync")]),v._v(" 获取文件真实路径")]),v._v(" "),_("li",[v._v("将文件真实路径缓存到 "),_("code",[v._v("Module._pathCache")]),v._v("("),_("code",[v._v("key")]),v._v(" 就是前面生成的 "),_("code",[v._v("cacheKey")]),v._v(")")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("fs.realPathSync")]),v._v(" 核心流程有 3 点")]),v._v(" "),_("ul",[_("li",[v._v("查询缓存 (缓存的 "),_("code",[v._v("key")]),v._v(" 为 "),_("code",[v._v("p")]),v._v("，即 "),_("code",[v._v("Module.findPath")]),v._v(" 中生成的文件路径)")]),v._v(" "),_("li",[v._v("从左往右遍历路径字符串，查询到 "),_("code",[v._v("/")]),v._v(" 时，拆分路径，判断该路径是否为软链接，如果是软链接则查询真实链接，并生成新路径 p，然后继续往后遍历，这里有 "),_("code",[v._v("1")]),v._v(" 个细节需要特别注意:\n"),_("ul",[_("li",[v._v("遍历过程中生成的子路径 "),_("code",[v._v("base")]),v._v(" 会缓存在 "),_("code",[v._v("knownHard 和 cache")]),v._v("中，避免重复查询")])])]),v._v(" "),_("li",[v._v("遍历完成得到模块对应的真实路径，此时会将原始路径 "),_("code",[v._v("original")]),v._v("作为"),_("code",[v._v("key")]),v._v("，真实路径作为 "),_("code",[v._v("value")]),v._v("，保存到缓存中")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("require.resolve.paths")]),v._v(" 等价于 "),_("code",[v._v("Module.resolveLookupPaths")]),v._v("，该方法用于获取所有 "),_("code",[v._v("node modules")]),v._v("\n可能存在的路径")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("require.resolve.paths")]),v._v(" 实现原理")]),v._v(" "),_("ul",[_("li",[v._v("如果路径为 "),_("code",[v._v("/ (根目录)")]),v._v(" ，直接返回 "),_("code",[v._v("[/node modules]")])]),v._v(" "),_("li",[v._v("否则，将路径字符串从后往前遍历，查询到 "),_("code",[v._v("/")]),v._v(" 时，拆分路径，在后面加上 "),_("code",[v._v("node modules")]),v._v("，并传入一个 "),_("code",[v._v("paths")]),v._v(" 数组，直至查询不到 "),_("code",[v._v("/")]),v._v(" 后返 "),_("code",[v._v("paths")]),v._v(" 数组")])])])]),v._v(" "),_("h2",{attrs:{id:"大厂项目开发流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大厂项目开发流程"}},[v._v("#")]),v._v(" 大厂项目开发流程")]),v._v(" "),_("p",[_("img",{attrs:{src:t(811),alt:""}}),v._v(" "),_("img",{attrs:{src:t(812),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"项目痛点分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#项目痛点分析"}},[v._v("#")]),v._v(" 项目痛点分析")]),v._v(" "),_("ul",[_("li",[v._v("创建项目/组件时，存在大量重复代码拷贝: 快速复用已有沉淀")]),v._v(" "),_("li",[v._v("协同开发时，由于 git 操作不规范，导致分支混乱，操作耗时: 制定标准的 gt 操作规范并集成到脚手架")]),v._v(" "),_("li",[v._v("发布上线耗时，而且容易出现各种错误: 制定标准的上线流程和规范并集成到脚手架")])]),v._v(" "),_("h2",{attrs:{id:"需求分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#需求分析"}},[v._v("#")]),v._v(" 需求分析")]),v._v(" "),_("ol",[_("li",[v._v("通用的研发脚手架")]),v._v(" "),_("li",[v._v("通用的项目/组件创建能力\n"),_("ul",[_("li",[v._v("模板支持定制，定制后能够发布生效")]),v._v(" "),_("li",[v._v("模板支持快速接入，极低的接入成本")])])]),v._v(" "),_("li",[v._v("通用的项目/组件发布能力\n"),_("ul",[_("li",[v._v("发布过程自动完成标准的 git 操作")]),v._v(" "),_("li",[v._v("发布成功后自动删除开发分支并创建 tag")]),v._v(" "),_("li",[v._v("发布后自动完成云构建、CDN、域名绑定")]),v._v(" "),_("li",[v._v("发布过程支持测试/正式两种模式")])])])]),v._v(" "),_("h2",{attrs:{id:"git-操作规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-操作规范"}},[v._v("#")]),v._v(" git 操作规范")]),v._v(" "),_("p",[_("img",{attrs:{src:t(813),alt:""}}),v._v(" "),_("img",{attrs:{src:t(814),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"脚手架拆包策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#脚手架拆包策略"}},[v._v("#")]),v._v(" 脚手架拆包策略")]),v._v(" "),_("ul",[_("li",[v._v("核心流程 core")]),v._v(" "),_("li",[v._v("命令 commands\n"),_("ul",[_("li",[v._v("初始化")]),v._v(" "),_("li",[v._v("发布")]),v._v(" "),_("li",[v._v("清除缓存")])])]),v._v(" "),_("li",[v._v("模型层 models\n"),_("ul",[_("li",[v._v("command 命令")]),v._v(" "),_("li",[v._v("project 项目")]),v._v(" "),_("li",[v._v("component 组件")]),v._v(" "),_("li",[v._v("npm 模块")]),v._v(" "),_("li",[v._v("git 仓库")])])]),v._v(" "),_("li",[v._v("支撑模块 utils\n"),_("ul",[_("li",[v._v("git 操作")]),v._v(" "),_("li",[v._v("云构建")]),v._v(" "),_("li",[v._v("工具方法")]),v._v(" "),_("li",[v._v("api 请求")]),v._v(" "),_("li",[v._v("git api")])])])]),v._v(" "),_("h2",{attrs:{id:"core-模块技术方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#core-模块技术方案"}},[v._v("#")]),v._v(" core 模块技术方案")]),v._v(" "),_("h3",{attrs:{id:"命令执行流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命令执行流程"}},[v._v("#")]),v._v(" 命令执行流程")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("准备阶段\n"),_("img",{attrs:{src:t(815),alt:""}})])]),v._v(" "),_("li",[_("p",[v._v("命令注册")])]),v._v(" "),_("li",[_("p",[v._v("命令执行")])]),v._v(" "),_("li",[_("p",[v._v("架构优化")])])]),v._v(" "),_("p",[_("img",{attrs:{src:t(816),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"脚手架命令动态加载设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#脚手架命令动态加载设计"}},[v._v("#")]),v._v(" 脚手架命令动态加载设计")]),v._v(" "),_("p",[_("img",{attrs:{src:t(817),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"node-多进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-多进程"}},[v._v("#")]),v._v(" node 多进程")]),v._v(" "),_("h3",{attrs:{id:"什么是进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程"}},[v._v("#")]),v._v(" 什么是进程")]),v._v(" "),_("blockquote",[_("p",[v._v("进程 (Process) 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。")])]),v._v(" "),_("p",[v._v("进程的概念主要有两点:")]),v._v(" "),_("ol",[_("li",[v._v("第一，进程是一个实体。每一个进程都有它自己的地址空间。")]),v._v(" "),_("li",[v._v("第二，进程是一个“执行中的程序”，存在嵌套关系。")])]),v._v(" "),_("p",[_("img",{attrs:{src:t(818),alt:""}})]),v._v(" "),_("p",[v._v("我们在 child_process 中创建的进程就是 Node.js 的子进程")]),v._v(" "),_("h2",{attrs:{id:"脚手架项目创建功能架构设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#脚手架项目创建功能架构设计"}},[v._v("#")]),v._v(" 脚手架项目创建功能架构设计")]),v._v(" "),_("h3",{attrs:{id:"架构背后的思考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构背后的思考"}},[v._v("#")]),v._v(" 架构背后的思考")]),v._v(" "),_("ol",[_("li",[v._v("可扩展: 能够快速复用到不同团队，适用不同团队之间的差异")]),v._v(" "),_("li",[v._v("低成本: 在不改动脚手架源码的情况下，新增模板，且新增模板的成本很低")]),v._v(" "),_("li",[v._v("高性能: 控制存储空间，安装时充分利用 Node 多进程提升安装性能")])]),v._v(" "),_("h3",{attrs:{id:"架构设计图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构设计图"}},[v._v("#")]),v._v(" 架构设计图")]),v._v(" "),_("p",[v._v("脚手架项目创建功能架构设计图:\n"),_("img",{attrs:{src:t(819),alt:""}}),v._v(" "),_("img",{attrs:{src:t(820),alt:""}}),v._v(" "),_("img",{attrs:{src:t(821),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"脚手架发布功能设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#脚手架发布功能设计"}},[v._v("#")]),v._v(" 脚手架发布功能设计")]),v._v(" "),_("p",[_("img",{attrs:{src:t(822),alt:""}}),v._v(" "),_("img",{attrs:{src:t(823),alt:""}})]),v._v(" "),_("h3",{attrs:{id:"发布功能架构图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#发布功能架构图"}},[v._v("#")]),v._v(" 发布功能架构图")]),v._v(" "),_("p",[_("img",{attrs:{src:t(824),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"git-flow-流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-流程"}},[v._v("#")]),v._v(" git flow 流程")]),v._v(" "),_("h3",{attrs:{id:"单人开发流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单人开发流程"}},[v._v("#")]),v._v(" 单人开发流程")]),v._v(" "),_("p",[_("img",{attrs:{src:t(825),alt:""}})]),v._v(" "),_("h3",{attrs:{id:"多人协作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多人协作流程"}},[v._v("#")]),v._v(" 多人协作流程")]),v._v(" "),_("p",[_("img",{attrs:{src:t(826),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"整体发布流程细节架构图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#整体发布流程细节架构图"}},[v._v("#")]),v._v(" 整体发布流程细节架构图")]),v._v(" "),_("p",[_("img",{attrs:{src:t(827),alt:""}}),v._v(" "),_("img",{attrs:{src:t(828),alt:""}}),v._v(" "),_("img",{attrs:{src:t(829),alt:""}}),v._v(" "),_("img",{attrs:{src:t(830),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"git-实例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-实例"}},[v._v("#")]),v._v(" git 实例")]),v._v(" "),_("p",[_("img",{attrs:{src:t(831),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"git-flow-version-生成逻辑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-version-生成逻辑"}},[v._v("#")]),v._v(" git flow version 生成逻辑")]),v._v(" "),_("p",[_("img",{attrs:{src:t(832),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"git-flow-本地代码提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-本地代码提交"}},[v._v("#")]),v._v(" git flow 本地代码提交")]),v._v(" "),_("p",[_("img",{attrs:{src:t(833),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"云构建架构设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#云构建架构设计"}},[v._v("#")]),v._v(" 云构建架构设计")]),v._v(" "),_("h3",{attrs:{id:"为什么需要云构建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要云构建"}},[v._v("#")]),v._v(" 为什么需要云构建")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("减少发布过程中的重复劳动")]),v._v(" "),_("ul",[_("li",[v._v("打包构建")]),v._v(" "),_("li",[v._v("上传静态资源服务器")]),v._v(" "),_("li",[v._v("上传 CDN")])])]),v._v(" "),_("li",[_("p",[v._v("避免不同环境间造成的差异，保证依赖版本的一致性")])]),v._v(" "),_("li",[_("p",[v._v("提升构建性能")])]),v._v(" "),_("li",[_("p",[v._v("对构建过程进行统一管控")]),v._v(" "),_("ul",[_("li",[v._v("发布前代码统一规则检查")]),v._v(" "),_("li",[v._v("封网日统一发布卡口")])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);